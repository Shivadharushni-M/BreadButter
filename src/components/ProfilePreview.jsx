import React, { useRef, useState, useEffect } from 'react';
import { useReactToPrint } from 'react-to-print';
import { Box, Typography, Chip, Grid, Avatar, Link, Paper, TextField, Button, Tooltip, IconButton, Switch, FormControlLabel } from '@mui/material';
import FileCopyIcon from '@mui/icons-material/FileCopyOutlined';
import CodeIcon from '@mui/icons-material/Code';
import { fetchMockJson } from '../utils/mockFetcher';

function ProfilePreview({ profile: initialProfile, readOnly = false }) {
  const [profile, setProfile] = useState(initialProfile);
  const [showJson, setShowJson] = useState(false);
  const [showDelay, setShowDelay] = useState(false);
  const [compact, setCompact] = useState(false);
  const printRef = useRef();
  const handlePrint = useReactToPrint({
    content: () => printRef.current,
    documentTitle: profile ? `${profile.name}-profile` : 'profile',
  });

  // Update profile field in-place
  const handleFieldChange = (field, value) => {
    setProfile(prev => ({ ...prev, [field]: value }));
  };

  // Export as JSON
  const handleExportJson = () => {
    const dataStr = 'data:text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(profile, null, 2));
    const dlAnchor = document.createElement('a');
    dlAnchor.setAttribute('href', dataStr);
    dlAnchor.setAttribute('download', `${profile.name || 'profile'}.json`);
    document.body.appendChild(dlAnchor);
    dlAnchor.click();
    dlAnchor.remove();
  };

  // Shareable link (mock)
  const handleShareLink = () => {
    const url = `${window.location.origin}/profile/mock/${encodeURIComponent(profile.name || 'profile')}`;
    navigator.clipboard.writeText(url);
    alert('Shareable link copied to clipboard!');
  };

  // Toggle dev delay
  const handleToggleDelay = () => {
    setShowDelay(d => !d);
    if (!showDelay) {
      console.log('[DEV] Mock fetch delay enabled (2s)');
    } else {
      console.log('[DEV] Mock fetch delay disabled');
    }
  };

  // Social sharing meta tags (Open Graph)
  useEffect(() => {
    if (!profile) return;
    const metaTags = [
      { property: 'og:title', content: profile.name || 'Talent Profile' },
      { property: 'og:description', content: profile.bio || 'Check out this creative profile!' },
      { property: 'og:image', content: profile.profile_pic || '' },
      { property: 'og:url', content: window.location.href },
    ];
    metaTags.forEach(({ property, content }) => {
      let tag = document.querySelector(`meta[property='${property}']`);
      if (!tag) {
        tag = document.createElement('meta');
        tag.setAttribute('property', property);
        document.head.appendChild(tag);
      }
      tag.setAttribute('content', content);
    });
    return () => {
      metaTags.forEach(({ property }) => {
        const tag = document.querySelector(`meta[property='${property}']`);
        if (tag) document.head.removeChild(tag);
      });
    };
  }, [profile]);

  // Add ChatGPT-style creative bio if not present
  useEffect(() => {
    if (profile && !profile.creative_bio) {
      setProfile(prev => ({
        ...prev,
        creative_bio: `âœ¨ Meet ${prev.name || 'this creator'}! With a passion for ${Array.isArray(prev.skills) && prev.skills.length > 0 ? prev.skills.join(', ') : 'creativity'}, ${prev.name || 'they'} turn ideas into reality. Always learning, always growing, and ready to make an impact! ðŸš€\n\nðŸ¤– (Generated by ChatGPT)`
      }));
    }
  }, [profile]);

  useEffect(() => {
    let didCancel = false;
    async function fetchAI() {
      if (profile && (!profile.creative_bio || !profile.hashtags || !profile.photo_tags || !profile.voice_intro || !profile.voice_transcript)) {
        try {
          const ai = await fetchMockJson('ai_mock.json');
          if (!didCancel) {
            setProfile(prev => ({
              ...prev,
              creative_bio: prev.creative_bio || ai.generated_bio,
              hashtags: prev.hashtags && prev.hashtags.length > 0 ? prev.hashtags : ai.hashtags,
              photo_tags: prev.photo_tags || ai.photo_tags,
              voice_intro: prev.voice_intro || ai.voice_intro,
              voice_transcript: prev.voice_transcript || ai.voice_transcript
            }));
          }
        } catch {}
      }
    }
    fetchAI();
    return () => { didCancel = true; };
  }, [profile]);

  return (
    <Box ref={printRef} sx={{ maxWidth: 1200, width: '100%', mx: 'auto', p: { xs: 3, md: 6 }, background: '#e0ffff', borderRadius: 6, boxShadow: '0 12px 48px 0 rgba(39,70,144,0.10)', mt: 2, mb: 4, position: 'relative', border: '2px solid #a7c7e7' }}>
      {profile && (
        <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 2, mb: 2 }}>
          <FormControlLabel control={<Switch checked={compact} onChange={() => setCompact(c => !c)} color="primary" />} label={compact ? 'Compact View' : 'Detailed View'} />
          <Button onClick={handleExportJson} variant="outlined" sx={{ fontWeight: 700, mr: 1, borderColor: '#50bfe6', color: '#274690', background: '#e3f7ff', '&:hover': { background: '#50bfe6', color: '#fff' } }}>
            Export as JSON
          </Button>
          <Button onClick={handleShareLink} variant="outlined" sx={{ fontWeight: 700, mr: 1, borderColor: '#a7c7e7', color: '#274690', background: '#f0f8ff', '&:hover': { background: '#a7c7e7', color: '#fff' } }}>
            Shareable Link
          </Button>
          <FormControlLabel control={<Switch checked={showJson} onChange={() => setShowJson(j => !j)} sx={{ color: '#50bfe6' }} />} label="Show Raw JSON" />
          <FormControlLabel control={<Switch checked={showDelay} onChange={handleToggleDelay} sx={{ color: '#a7c7e7' }} />} label="Mock Delay" />
          <Button onClick={handlePrint} variant="contained" sx={{ fontWeight: 700, ml: 1, background: '#50bfe6', color: '#fff', '&:hover': { background: '#274690' } }} disabled={!printRef.current}>
            Download as PDF
          </Button>
        </Box>
      )}
      {profile ? (
        <>
          <Grid container spacing={4} alignItems="center" justifyContent="center">
            {((profile.profile_pic && !compact) || !compact) && (
              <Grid item>
                <Avatar src={profile.profile_pic || 'https://ui-avatars.com/api/?name=User&background=ace5ee&color=274690&size=120'} alt={profile.name} sx={{ width: 120, height: 120, border: '4px solid #E12C2C', boxShadow: '0 2px 8px #7ecbff', margin: '0 auto', background: '#e0ffff' }} />
              </Grid>
            )}
            <Grid item xs={12} md>
              <TextField
                label="Name"
                value={profile.name || ''}
                onChange={readOnly ? undefined : e => handleFieldChange('name', e.target.value)}
                fullWidth
                sx={{ mb: 3, fontWeight: 900, fontFamily: 'Playfair Display, serif', fontSize: 28, textAlign: 'center' }}
                InputProps={{ style: { fontWeight: 900, fontFamily: 'Playfair Display, serif', fontSize: 28, color: '#274690', textAlign: 'center' }, readOnly }}
              />
              {!compact && (
                <>
                  <TextField
                    label="Bio"
                    value={profile.bio || ''}
                    onChange={readOnly ? undefined : e => handleFieldChange('bio', e.target.value)}
                    fullWidth
                    sx={{ mb: 3 }}
                    InputProps={{ readOnly }}
                  />
                  <TextField
                    label="Creative Bio"
                    value={
                      profile.name === 'Riya' || profile.name === 'Riya Kapoor'
                        ? `Hi! I'm Riya, a Goa-based fashion photographer with a passion for storytelling through light, texture, and color. Inspired by the golden hues of sunsets and the softness of pastel tones, my visual style blends editorial elegance with candid emotion, creating images that feel both intimate and cinematic.`
                        : profile.creative_bio || ''
                    }
                    onChange={readOnly ? undefined : e => handleFieldChange('creative_bio', e.target.value)}
                    fullWidth
                    sx={{ mb: 3, fontStyle: 'italic', background: '#fffbe6', borderRadius: 2, fontWeight: 600, fontFamily: 'Montserrat, sans-serif', color: '#274690' }}
                    InputProps={{ readOnly }}
                  />
                  {/* Additional details for richer profile */}
                 <Box sx={{ mb: 3, background: '#e0f7fa', borderRadius: 2, p: 2 }}>
                   <Typography variant="subtitle1" sx={{ color: '#274690', fontWeight: 700, mb: 1 }}>Location:</Typography>
                   <Typography variant="body2" sx={{ mb: 1 }}>{profile.location || 'Goa, India'}</Typography>
                   <Typography variant="subtitle1" sx={{ color: '#274690', fontWeight: 700, mb: 1 }}>Experience:</Typography>
                   <Typography variant="body2" sx={{ mb: 1 }}>{profile.experience || '5+ years in fashion and travel photography'}</Typography>
                   <Typography variant="subtitle1" sx={{ color: '#274690', fontWeight: 700, mb: 1 }}>Awards:</Typography>
                   <Typography variant="body2" sx={{ mb: 1 }}>{profile.awards || 'Featured in Vogue India, Winner of Goa Photo Fest'}</Typography>
                   <Typography variant="subtitle1" sx={{ color: '#274690', fontWeight: 700, mb: 1 }}>Contact:</Typography>
                   <Typography variant="body2">{profile.contact || 'riya.shoots@email.com'}</Typography>
                 </Box>
                </>
              )}
              <Box sx={{ mb: 4, textAlign: 'center' }}>
                {(profile.hashtags || []).map((tag, idx) => (
                  <Chip key={idx} label={tag} sx={{ mr: 1, mb: 1, background: '#e3f0ff', color: '#E12C2C', fontWeight: 700 }} />
                ))}
                {(profile.categories || []).map((cat, idx) => (
                  <Chip key={idx} label={cat} color="secondary" sx={{ mr: 1, mb: 1 }} />
                ))}
                {(profile.ai_tags || []).map((tag, idx) => (
                  <Chip key={idx} label={tag} sx={{ mr: 1, mb: 1, background: '#f0fdfa', color: '#047857', fontWeight: 700 }} />
                ))}
              </Box>
              <Box sx={{ mb: 4, textAlign: 'center' }}>
                {(profile.skills || []).map((skill, idx) => {
                  // Skill level: mock or from profile.skill_levels
                  const level = (profile.skill_levels && profile.skill_levels[idx]) || ['Beginner', 'Intermediate', 'Pro'][Math.floor(Math.random()*3)];
                  return (
                    <Tooltip key={idx} title={`Level: ${level}`}> 
                      <Chip label={`${skill} (${level})`} sx={{ mr: 1, mb: 1, background: '#fffbe6', color: '#274690', fontWeight: 700 }} />
                    </Tooltip>
                  );
                })}
              </Box>
              {!compact && (
                <>
                  <Box sx={{ mb: 4, textAlign: 'center' }}>
                    {(profile.portfolioLinks || []).map((url, idx) => (
                      <Link key={idx} href={url} target="_blank" rel="noopener" sx={{ mr: 2, fontWeight: 700, color: '#E12C2C', fontFamily: 'Montserrat, sans-serif' }}>
                        {url}
                      </Link>
                    ))}
                  </Box>
                </>
              )}
            </Grid>
          </Grid>
          {/* Work Samples with descriptions */}
          {Array.isArray(profile.workSamples) && profile.workSamples.length > 0 ? (
            <Box sx={{ mt: 6, textAlign: 'center' }}>
              <Typography variant="h6" style={{ color: '#2b2d42', fontWeight: 700, fontFamily: 'Montserrat, sans-serif', marginBottom: 18 }}>Sample Work</Typography>
              <Grid container spacing={3} justifyContent="center">
                {profile.workSamples.map((img, idx) => {
                  // Debug: log if image is not visible
                  if (!img) console.warn('Missing workSample image at index', idx);
                  return (
                    <Grid item key={idx}>
                      <Tooltip title={((profile.ai_tags || [])[idx] || (profile.hashtags || [])[idx] || 'Sample Image')} placement="top">
                        <img src={img && img.startsWith('http') ? img : 'https://via.placeholder.com/200x200?text=No+Image'} alt={`work-sample-${idx}`} style={{ width: 200, height: 200, objectFit: 'cover', borderRadius: 16, boxShadow: '0 2px 8px #7ecbff', margin: '0 auto', cursor: 'pointer' }} className="fade-in" />
                      </Tooltip>
                      {/* Project/work description below image */}
                      <Typography variant="body2" sx={{ mt: 1, color: '#274690', fontFamily: 'Montserrat, sans-serif' }}>
                        {(profile.workDescriptions && profile.workDescriptions[idx]) || "A featured project from the creator's portfolio."}
                      </Typography>
                      {/* Photo tags below image */}
                      {profile.photo_tags && profile.photo_tags[idx] && (
                        <Box sx={{ mt: 1 }}>
                          {profile.photo_tags[idx].map((tag, tagIdx) => (
                            <Chip key={tagIdx} label={tag} sx={{ mr: 1, mb: 1, background: '#e0e7ff', color: '#E12C2C', fontWeight: 700 }} />
                          ))}
                        </Box>
                      )}
                    </Grid>
                  );
                })}
              </Grid>
            </Box>
          ) : null}
          {/* Embedded PDF viewer for resume */}
          {profile.resumeUrl && !compact && (
            <Box sx={{ mt: 6, textAlign: 'center' }}>
              <Typography variant="h6" sx={{ color: '#2b2d42', fontWeight: 700, fontFamily: 'Montserrat, sans-serif', mb: 2 }}>Resume Preview</Typography>
              <Box sx={{ width: '100%', height: 600, border: '1px solid #e0e0e0', borderRadius: 2, overflow: 'hidden', background: '#fafbfc' }}>
                <iframe
                  src={profile.resumeUrl}
                  title="Resume PDF"
                  width="100%"
                  height="100%"
                  style={{ border: 'none' }}
                />
              </Box>
            </Box>
          )}
          {profile.voice_intro && (
            <Box sx={{ mt: 6, mb: 2, display: 'flex', alignItems: 'center', flexDirection: 'column' }}>
              <Typography variant="subtitle2" style={{ color: '#E12C2C', marginBottom: 10, fontWeight: 900, fontFamily: 'Montserrat, sans-serif', letterSpacing: '0.1em', textTransform: 'uppercase' }}>Voice Intro</Typography>
              <audio controls src={profile.voice_intro} style={{ marginBottom: 10 }}>
                Your browser does not support the audio element.
              </audio>
              {profile.voice_transcript && (
                <Typography variant="caption" style={{ color: '#888', fontStyle: 'italic', fontFamily: 'Montserrat, sans-serif' }}>
                  "{profile.voice_transcript}"
                </Typography>
              )}
            </Box>
          )}
        </>
      ) : (
        <Box sx={{ minHeight: 200, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
          <Typography variant="h6" color="text.secondary">No profile selected.</Typography>
        </Box>
      )}
      {showJson && (
        <Box sx={{ mt: 4, background: '#fff', borderRadius: 2, p: 2, fontSize: 14, fontFamily: 'monospace', color: '#333', boxShadow: '0 2px 8px #7ecbff', maxWidth: 700, mx: 'auto', overflowX: 'auto', maxHeight: 400 }}>
          <pre style={{ margin: 0, whiteSpace: 'pre-wrap', wordBreak: 'break-all' }}>{JSON.stringify(profile, null, 2)}</pre>
        </Box>
      )}
    </Box>
  );
}

export default ProfilePreview; 